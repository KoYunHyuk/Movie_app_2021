{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","count","isLoading","movies","add","console","log","setState","current","minus","getMovies","a","axios","get","data","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPA4BeA,MAzBf,YAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OAAO,sBAAKC,UAAU,QAAf,UACH,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,aAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACKD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBL,UAAU,gBAA1B,SAA2CI,GAAlCC,QAGjB,mBAAGL,UAAU,iBAAb,SAA+BH,EAAQS,MAAM,EAAG,c,yBCmJ7CC,E,4MA3IbC,MAAQ,CACNC,MAAO,EACPC,WAAW,EACXC,OAAQ,I,EAGVC,IAAM,WACJC,QAAQC,IAAI,OACZ,EAAKC,UAAS,SAAAC,GAAO,MAAK,CAACP,MAAOO,EAAQP,MAAQ,O,EAEpDQ,MAAQ,WACNJ,QAAQC,IAAI,SACZ,EAAKC,UAAS,SAAAC,GAAO,MAAK,CAACP,MAAOO,EAAQP,MAAQ,O,EAKpDS,U,sBAAY,8BAAAC,EAAA,sEAOAC,IAAMC,IAAI,4DAPV,gBAKCV,EALD,EAIRW,KACEA,KAAOX,OAGXE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CAAEJ,SAAQD,WAAW,IATzB,2C,kEAYVG,QAAQC,IAAI,sBAIZS,KAAKL,c,2CAGLL,QAAQC,IAAI,oB,6CAGZD,QAAQC,IAAI,0B,+BAMZD,QAAQC,IAAI,iBADN,MASwBS,KAAKf,MAA3BE,EATF,EASEA,UAAWC,EATb,EASaA,OACnB,OACE,yBAASX,UAAU,YAAnB,SACGU,EACC,qBAAKV,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGW,EAAOR,KAAI,SAAAqB,GAAK,OACf,cAAC,EAAD,CAEE9B,GAAI8B,EAAM9B,GACVC,KAAM6B,EAAM7B,KACZC,MAAO4B,EAAM5B,MACbC,QAAS2B,EAAM3B,QACfC,OAAQ0B,EAAMC,mBACd1B,OAAQyB,EAAMzB,QANTyB,EAAM9B,e,GAvETgC,IAAMC,WCTxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.45987ece.chunk.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nfunction Movie({id, year, title, summary, poster, genres}){\r\n    return <div className=\"movie\">\r\n        <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie_data\">\r\n            <h3 className=\"movie__title\">{title}</h3>\r\n            <h5 className=\"movie__year\">{year}</h5>\r\n            <ul className=\"movie__genres\">\r\n                {genres.map((genre, index) => (\r\n                    <li key={index} className=\"genres__genre\">{genre}</li>\r\n                ))}\r\n            </ul>\r\n            <p className=\"movie__summary\">{summary.slice(0, 180)}</p>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nMovie.propTypes ={\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react'\nimport Potato from './Potato'\nimport Movie from './Movie'\nimport \"./App.css\"\n\nimport PropTypes from \"prop-types\"\nimport axios from \"axios\"\n\n// Function Component : function이고, 뭔가를 return함. screen에 표시됨.\n// Class Component : class야 하지만, react component로 부터 확장되고 screen에 표시됨. \n\n// 사용자는 그것들을 render method 안에 넣어야 함.\n\n// State 강의\n\nclass App extends React.Component{\n  // Data는 계속해서 변하기 때문에 state가 필요함.\n\n  /*constructor(props){ // javascript code\n    super(props);\n    console.log(\"hello\");\n  }*/\n  state = {\n    count: 0,\n    isLoading: true,\n    movies: []\n  }\n\n  add = () =>{\n    console.log(\"add\");\n    this.setState(current => ({count: current.count + 1}));\n  };\n  minus = () =>{\n    console.log(\"minus\");\n    this.setState(current => ({count: current.count - 1}));\n  };\n\n\n  // life cycle method : 기본적으로 react가 component를 생성, 제거하는 방법.\n  getMovies = async() => { // 이 함수는 비동기라 기다려야 한다.\n    // axios가 끝날 때 까지 기다렸다가 계속해!! 이 뜻임.\n    // await를 사용하기 위해서 async를 사용함.\n    const {\n      data: {\n        data: {movies}\n      }\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"); \n    console.log(movies); // (=movies.data.data.movies)\n    this.setState({ movies, isLoading: false });\n  }\n  componentDidMount(){ // render를 하면 맨 처음에 호출되는 l.c.m\n    console.log(\"component rendered\");\n    /*setTimeout(()=>{\n      this.setState({isLoading: false}); \n    }, 6000);*/\n    this.getMovies();\n  }\n  componentDidUpdate(){ // render에서 업데이트가 완료되었다고 판단되면 실행하는 코드.\n    console.log(\"i just updated\");\n  }\n  componentWillUnmount(){ // component가 떠날 때 호출됨. ex) 다른 페이지로 전환\n    console.log(\"Goodbye, curel world\");\n  }\n\n\n  // 매 순간 setState를 호출할 때마다 react는 새로운 state와 함께 render function을 호출함. (중요)\n  render(){\n    console.log(\"I'm rendering\"); \n    /*return (\n      <div>\n        <h1>The Number is : {this.state.count}</h1>\n        <button onClick={this.add}>Add</button>\n        <button onClick={this.minus}>Minus</button>\n      </div>\n    );*/\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie \n                key={movie.id}\n                id={movie.id} \n                year={movie.year} \n                title={movie.title} \n                summary={movie.summary} \n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\n// Component 강의\n/*function Food({name, picture, rating}){ \n  return (\n    <div>\n      <h1>I like {name}</h1>\n      <h4>{rating}/5.0</h4>\n      <img src={picture} alt={name} />\n    </div>\n  );\n}\n\nFood.propTypes = {\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  rating: PropTypes.number\n};\n\nconst foodILike = [\n  {\n    id: 1,\n    name: \"1\",\n    image: \"1\",\n    rating: 5\n  },\n  {\n    id: 2,\n    name: \"2\",\n    image: \"2\",\n    rating: 4.9\n  },\n  {\n    id: 3,\n    name: \"3\",\n    image: \"3\",\n    rating: 4.8\n  },\n  {\n    id: 4,\n    name: \"4\",\n    image: \"4\",\n    rating: 4.7\n  }\n]\n\nfunction renderFood(dish){\n  // console.log(dish);\n  return <Food name={dish.name} picture={dish.image} />;\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n      {foodILike.map(dish => (\n        <Food key={dish.id} name={dish.name} picture={dish.image} rating={dish.rating} /> \n        // key 값은 react 내부에서 사용되기 위한 값이고, Food 함수 내부로는 들어가지 않는다!!\n      ))}\n    </div>\n  );\n}*/\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Potato from './Potato';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}